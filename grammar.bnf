program               ::= decl* EOF ;

decl                  ::= var_decl | stmt ;
var_decl              ::= "var" IDENTIFIER ( "=" expr )? ";" ;

stmt                  ::= expr_stmt | print_stmt | block_stmt;
expr_stmt             ::= expr ";" ;
print_stmt            ::= "print" expr ";" ;
block_stmt            ::= "{" decl* "}" ;

expr                  ::= assignment_expr
assignment_expr       ::= IDENTIFIER '=' assignment_expr | comma_expr;
comma_expr            ::= conditional_expr (',' conditional_expr)* ;
conditional_expr      ::= logical_expr ('?' expr ':' expr)* ;
logical_expr          ::= equality_expr ( ("and" equality_expr) | ("or" equality_expr) )* ;
equality_expr         ::= comparison_expr  ( ( "!=" | "==" ) comparison_expr  )* ;
comparison_expr       ::= term_expr  ( ( '>' | ">=" | '<' | "<=" ) term_expr  )* ;
term_expr             ::= factor_expr ( ( '-' | '+' ) factor_expr  )* ;
factor_expr           ::= unary_expr ( ( '/' | '*' ) unary_expr )* ;
unary_expr            ::= ( '!' | '-' ) unary_expr | primary_expr ;
primary_expr          ::= NUMBER | STRING | "true" | "false" | "nil" | "(" expr ")" IDENTIFIER ;

NUMBER                ::= DIGIT+ ( "." DIGIT+ )? ;
STRING                ::= '"' <any_except('"')>* '"' ;
IDENTIFIER            ::= ALPHA ( ALPHA | DIGIT )* ;
ALPHA                 ::= 'a' .. 'z' | 'A' .. 'Z' | '_' ;
DIGIT                 ::= '0' .. '9' ;
